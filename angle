./parsing/parsing_utils.c:		data->f = value;
./parsing/parsing_utils.c:		data->c = value;
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "NO") && !data->textures[NO])
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "SO") && !data->textures[SO])
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "WE") && !data->textures[WE])
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "EA") && !data->textures[EA])
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "F") && data->f == -1)
./parsing/parsing_utils.c:	if (!ft_strcmp(&line[i], "C") && data->c == -1)
./parsing/check_errors_1.c:	while (data->mp[p.y])
./parsing/check_errors_1.c:		while (data->mp[p.y][p.x])
./parsing/check_errors_1.c:			if (is_space(data->mp[p.y][p.x]) && !valid_space(data, p.x, p.y))
./parsing/check_errors_1.c:			if (data->mp[p.y][p.x] == '0' && !check_position(data, p.y, p.x))
./parsing/check_errors_1.c:			else if (data->mp[p.y][p.x] == 'N' || data->mp[p.y][p.x] == 'S'
./parsing/check_errors_1.c:				|| data->mp[p.y][p.x] == 'E' || data->mp[p.y][p.x] == 'W')
./parsing/check_errors_1.c:	data->x = (double)(p.x * CELL) + ((double)CELL / 2);
./parsing/check_errors_1.c:	data->y = (double)(p.y * CELL) + ((double)CELL / 2);
./parsing/check_errors_1.c:	direc_angle(data, data->mp[p.y][p.x]);
./parsing/check_errors_1.c:	data->mp[p.y][p.x] = '0';
./parsing/check_errors_1.c:	if (!x || !y || x == ft_strlen(data->mp[y]) - 1 \
./parsing/check_errors_1.c:		|| y == data->len_map - 1)
./parsing/check_errors_1.c:	if (x + 1 > ft_strlen(data->mp[y])
./parsing/check_errors_1.c:		|| !data->mp[y][x + 1] || is_space(data->mp[y][x + 1]))
./parsing/check_errors_1.c:	if (x - 1 < 0 || is_space(data->mp[y][x - 1]))
./parsing/check_errors_1.c:	if (y + 1 >= data->len_map || x > ft_strlen(data->mp[y + 1])
./parsing/check_errors_1.c:		|| !data->mp[y + 1][x] || is_space(data->mp[y + 1][x]))
./parsing/check_errors_1.c:	if (x > ft_strlen(data->mp[y - 1]) || !data->mp[y - 1][x]
./parsing/check_errors_1.c:		|| is_space(data->mp[y - 1][x]))
./parsing/check_errors_utils.c:	rowlen = ft_strlen(data->mp[y]);
./parsing/check_errors_utils.c:	if (x + 1 < rowlen && (!is_space(data->mp[y][x + 1]) \
./parsing/check_errors_utils.c:			&& data->mp[y][x + 1] != '1'))
./parsing/check_errors_utils.c:	if (y + 1 < data->len_map && x < ft_strlen(data->mp[y + 1]) \
./parsing/check_errors_utils.c:	&& (!is_space(data->mp[y + 1][x]) && data->mp[y + 1][x] != '1'))
./parsing/check_errors_utils.c:	if (x - 1 >= 0 && (!is_space(data->mp[y][x - 1]) \
./parsing/check_errors_utils.c:			&& data->mp[y][x - 1] != '1'))
./parsing/check_errors_utils.c:	if (y - 1 >= 0 && (!is_space(data->mp[y - 1][x]) \
./parsing/check_errors_utils.c:			&& data->mp[y - 1][x] != '1'))
./parsing/initial_parse.c:	data->map = NULL;
./parsing/initial_parse.c:	data->mp = NULL;
./parsing/initial_parse.c:	data->textures = malloc(sizeof(char *) * 5);
./parsing/initial_parse.c:	if (!data->textures)
./parsing/initial_parse.c:		data->textures[i++] = NULL;
./parsing/initial_parse.c:	data->len_map = 0;
./parsing/initial_parse.c:	data->f = -1;
./parsing/initial_parse.c:	data->c = -1;
./parsing/initial_parse.c:	data->map_h = 0;
./parsing/initial_parse.c:	data->map_w = 0;
./parsing/initial_parse.c:	if (data->mp != NULL)
./parsing/initial_parse.c:		while (data->mp[i])
./parsing/initial_parse.c:			free(data->mp[i]);
./parsing/initial_parse.c:		free(data->mp);
./parsing/initial_parse.c:		if (data->textures[i] != NULL)
./parsing/initial_parse.c:			free(data->textures[i]);
./parsing/initial_parse.c:	free(data->textures);
./parsing/initial_parse.c:	ft_lstclear(&(data->map));
./parsing/parsing_utils_1.c:	y = data->len_map - 1;
./parsing/parsing_utils_1.c:	data->map_h = data->len_map;
./parsing/parsing_utils_1.c:	while (y && data->mp[y])
./parsing/parsing_utils_1.c:		while (data->mp[y][x])
./parsing/parsing_utils_1.c:			if (!is_space(data->mp[y][x]))
./parsing/parsing_utils_1.c:		free(data->mp[y]);
./parsing/parsing_utils_1.c:		data->mp[y] = NULL;
./parsing/parsing_utils_1.c:		data->map_h = y;
./parsing/parsing.c:	data->textures[flag] = ft_strdup(&arg[i]);
./parsing/parsing.c:		ft_lstadd_back(&data->map, ft_lstnew(ft_strdup(line)));
./parsing/check_errors.c:	if (y == 0 || y + 1 == data->len_map)
./parsing/check_errors.c:		while (data->mp[y][x])
./parsing/check_errors.c:			if (data->mp[y][x] != ' ' && data->mp[y][x] != '1')
./parsing/check_errors.c:		while (is_space(data->mp[y][x]))
./parsing/check_errors.c:		if (data->mp[y][x] != '1')
./parsing/check_errors.c:		x = ft_strlen(data->mp[y]) - 1;
./parsing/check_errors.c:		while (is_space(data->mp[y][x]))
./parsing/check_errors.c:		if (data->mp[y][x] != '1')
./parsing/check_errors.c:		data->angel = get_rad(90);
./parsing/check_errors.c:		data->angel = get_rad(0);
./parsing/check_errors.c:		data->angel = get_rad(180);
./parsing/check_errors.c:		data->angel = get_rad(270);
./parsing/check_errors.c:	while (data->mp[y])
./parsing/check_errors.c:		if (ft_strlen(data->mp[y]) < data->map_w)
./parsing/check_errors.c:			new = malloc(sizeof(char) * (data->map_w + 1));
./parsing/check_errors.c:			ft_strlcpy(new, data->mp[y], data->map_w + 1);
./parsing/check_errors.c:			x = ft_strlen(data->mp[y]);
./parsing/check_errors.c:			while (x < data->map_w)
./parsing/check_errors.c:			free(data->mp[y]);
./parsing/check_errors.c:			data->mp[y] = new;
./parsing/check_errors.c:	tmp = data->map;
./parsing/check_errors.c:		if (i > data->map_w)
./parsing/check_errors.c:			data->map_w = i;
./parsing/check_errors.c:		data->mp[j] = ft_strdup(tmp->row);
./parsing/check_errors.c:		data->mp[j] = NULL;
./parsing/check_errors.c:	data->len_map = len;
./parsing/check_errors.c:	if (!data->map || data->len_map == 0)
./parsing/check_errors.c:	data->mp = malloc(sizeof(char *) * (len + 1));
./parsing/check_errors.c:	if (!data->mp)
./parsing/check_errors.c:	data->mp[0] = 0x00;
